#!/usr/bin/env bash
set -euo pipefail

echo "üöÄ –£–ü–ê–ö–û–í–ö–ê –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø"
echo "–í—Ä–µ–º—è: $(date)"

# –ß–µ—Ç–∫–∏–µ –ø—É—Ç–∏
PROJECT_DIR="$(cd "$(dirname "$0")/.." && pwd)"
APP_NAME="Killah Prototype.app"
PYTHON_VERSION="3.12"
PYTHON_FRAMEWORK_SRC="/Library/Frameworks/Python.framework"
VENV_NAME="venv"

# –ü—É—Ç–∏ —Å–±–æ—Ä–∫–∏
BUILD_DIR="$BUILT_PRODUCTS_DIR"
APP_PATH="$BUILD_DIR/$APP_NAME"
FRAMEWORKS_DIR="$APP_PATH/Contents/Frameworks"
RESOURCES_DIR="$APP_PATH/Contents/Resources"
VENV_DST="$RESOURCES_DIR/$VENV_NAME"

echo "üìÅ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: $APP_PATH"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if [ ! -d "$APP_PATH" ]; then
  echo "‚ùå .app –Ω–µ –Ω–∞–π–¥–µ–Ω: $APP_PATH"
  exit 1
fi

echo "‚úÖ .app –Ω–∞–π–¥–µ–Ω"

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏
mkdir -p "$FRAMEWORKS_DIR"
mkdir -p "$RESOURCES_DIR"

echo "üìã –ö–æ–ø–∏—Ä—É–µ–º Python.framework..."
cp -R -L "$PYTHON_FRAMEWORK_SRC" "$FRAMEWORKS_DIR/"
echo "‚úÖ Python.framework —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω"

echo "üìã –°–æ–∑–¥–∞–µ–º venv..."
PYTHON_BIN="$FRAMEWORKS_DIR/Python.framework/Versions/$PYTHON_VERSION/bin/python3"
"$PYTHON_BIN" -m venv "$VENV_DST"
echo "‚úÖ venv —Å–æ–∑–¥–∞–Ω"

echo "üìã –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏..."
source "$VENV_DST/bin/activate"
pip install -r "$PROJECT_DIR/Resources/requirements.txt"
deactivate
echo "‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"

echo "üìã –ö–æ–ø–∏—Ä—É–µ–º Python —Ñ–∞–π–ª—ã..."
cp "$PROJECT_DIR/Resources/autocomplete.py" "$RESOURCES_DIR/"
cp "$PROJECT_DIR/Resources/minillm_export.pt" "$RESOURCES_DIR/"
cp "$PROJECT_DIR/Resources/requirements.txt" "$RESOURCES_DIR/"
echo "‚úÖ Python —Ñ–∞–π–ª—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã"

echo "üìã –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫..."
PYBIN="$VENV_DST/bin/python3"
install_name_tool -change \
  "/Library/Frameworks/Python.framework/Versions/$PYTHON_VERSION/lib/libpython${PYTHON_VERSION}.dylib" \
  "@executable_path/../../../Frameworks/Python.framework/Versions/$PYTHON_VERSION/lib/libpython${PYTHON_VERSION}.dylib" \
  "$PYBIN"
echo "‚úÖ –ü—É—Ç–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã"

echo "üìã –ü–µ—Ä–µ–ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º python3..."
codesign --force --sign - "$PYBIN"
echo "‚úÖ –ü–µ—Ä–µ–ø–æ–¥–ø–∏—Å–∞–Ω–æ"

echo "üéâ –£–ü–ê–ö–û–í–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!"
echo "   PYTHON_FRAMEWORK_SRC: $PYTHON_FRAMEWORK_SRC"
echo "   VENV_NAME: $VENV_NAME"

# –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å–±–æ—Ä–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π Xcode
BUILD_DIR="$BUILT_PRODUCTS_DIR"                  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é Xcode
APP_PATH="$BUILD_DIR/$APP_NAME"                  # –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ .app

echo "üéØ –ü–£–¢–ò –°–ë–û–†–ö–ò:"
echo "   BUILD_DIR: $BUILD_DIR"
echo "   APP_PATH: $APP_PATH"
echo "   BUILT_PRODUCTS_DIR env var: ${BUILT_PRODUCTS_DIR:-–ù–ï –ó–ê–î–ê–ù–û}"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ .app —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
echo "üîç –ü–†–û–í–ï–†–Ø–ï–ú –°–£–©–ï–°–¢–í–û–í–ê–ù–ò–ï .app..."
if [ ! -d "$APP_PATH" ]; then
  echo "‚ùå‚ùå‚ùå .app –ù–ï –ù–ê–ô–î–ï–ù –ü–û –ü–£–¢–ò $APP_PATH"
  echo "üìÅ –°–û–î–ï–†–ñ–ò–ú–û–ï BUILD_DIR ($BUILD_DIR):"
  if [ -d "$BUILD_DIR" ]; then
    ls -la "$BUILD_DIR" || echo "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è BUILD_DIR"
  else
    echo "BUILD_DIR –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!"
  fi
  exit 1
else
  echo "‚úÖ .app –ù–ê–ô–î–ï–ù: $APP_PATH"
fi

FRAMEWORKS_DIR="$APP_PATH/Contents/Frameworks"   # –ü—É—Ç—å –∫ Frameworks
RESOURCES_DIR="$APP_PATH/Contents/Resources"     # –ü—É—Ç—å –∫ Resources
VENV_DST="$RESOURCES_DIR/$VENV_NAME"             # –ü—É—Ç—å –∫ venv

echo "üìÇ –°–¢–†–£–ö–¢–£–†–ê –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø:"
echo "   FRAMEWORKS_DIR: $FRAMEWORKS_DIR"
echo "   RESOURCES_DIR: $RESOURCES_DIR"
echo "   VENV_DST: $VENV_DST"

echo "‚è≥ –°—Ç–∞—Ä—Ç —É–ø–∞–∫–æ–≤–∫–∏ .app..."

# –£–º–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É–ø–∞–∫–æ–≤–∫—É –µ—Å–ª–∏ –≤—Å–µ —É–∂–µ –≥–æ—Ç–æ–≤–æ
echo "üîç –ü–†–û–í–ï–†–Ø–ï–ú, –ù–£–ñ–ù–ê –õ–ò –£–ü–ê–ö–û–í–ö–ê..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ
NEED_PACKAGING=false

# –ü—Ä–æ–≤–µ—Ä—è–µ–º Python.framework
if [ ! -d "$FRAMEWORKS_DIR/Python.framework" ]; then
    echo "   ‚ùå Python.framework –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç - –Ω—É–∂–Ω–∞ —É–ø–∞–∫–æ–≤–∫–∞"
    NEED_PACKAGING=true
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º venv
if [ ! -d "$VENV_DST" ] || [ ! -f "$VENV_DST/bin/python3" ]; then
    echo "   ‚ùå venv –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω - –Ω—É–∂–Ω–∞ —É–ø–∞–∫–æ–≤–∫–∞"
    NEED_PACKAGING=true
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º torch –≤ venv
if [ -f "$VENV_DST/bin/python3" ]; then
    if ! "$VENV_DST/bin/python3" -c "import torch" 2>/dev/null; then
        echo "   ‚ùå torch –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ venv - –Ω—É–∂–Ω–∞ —É–ø–∞–∫–æ–≤–∫–∞"
        NEED_PACKAGING=true
    fi
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã —Ä–µ—Å—É—Ä—Å–æ–≤
if [ ! -f "$RESOURCES_DIR/autocomplete.py" ]; then
    echo "   ‚ùå autocomplete.py –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç - –Ω—É–∂–Ω–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ"
    NEED_PACKAGING=true
fi

if [ ! -f "$RESOURCES_DIR/minillm_export.pt" ]; then
    echo "   ‚ùå minillm_export.pt –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç - –Ω—É–∂–Ω–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ"
    NEED_PACKAGING=true
fi

if [ "$NEED_PACKAGING" = false ]; then
    echo "‚úÖ –í–°–ï –£–ñ–ï –ì–û–¢–û–í–û! –£–ø–∞–∫–æ–≤–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è."
    echo "üéØ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç:"
    echo "   ‚úÖ Python.framework"
    echo "   ‚úÖ venv —Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏"
    echo "   ‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã"
    echo "‚úÖ –£–ø–∞–∫–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (–Ω–∏—á–µ–≥–æ –Ω–µ –∏–∑–º–µ–Ω–µ–Ω–æ)!"
    exit 0
else
    echo "üöÄ –ù–ê–ß–ò–ù–ê–ï–ú –£–ü–ê–ö–û–í–ö–£..."
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Python.framework
echo "üêç –ü–†–û–í–ï–†–Ø–ï–ú PYTHON.FRAMEWORK..."
echo "   –û–∂–∏–¥–∞–µ–º—ã–π –ø—É—Ç—å: $PYTHON_FRAMEWORK_SRC"
if [ ! -d "$PYTHON_FRAMEWORK_SRC" ]; then
  echo "‚ùå‚ùå‚ùå Python.framework –ù–ï –ù–ê–ô–î–ï–ù –≤ $PYTHON_FRAMEWORK_SRC"
  echo "üîç –ü–†–û–í–ï–†–Ø–ï–ú –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–ï –ú–ï–°–¢–ê:"
  
  for py_path in "/Library/Frameworks/Python.framework" "/System/Library/Frameworks/Python.framework" "/usr/local/Frameworks/Python.framework"; do
    echo "   –ü—Ä–æ–≤–µ—Ä—è–µ–º: $py_path"
    if [ -d "$py_path" ]; then
      echo "   ‚úÖ –ù–ê–ô–î–ï–ù: $py_path"
      ls -la "$py_path/Versions/" 2>/dev/null || echo "   –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –≤–µ—Ä—Å–∏–π"
    else
      echo "   ‚ùå –ù–ï –ù–ê–ô–î–ï–ù: $py_path"
    fi
  done
  
  echo "üí° –£–°–¢–ê–ù–û–í–ò–¢–ï Python 3.12 —Å python.org"
  echo "üí° –°—Å—ã–ª–∫–∞: https://www.python.org/downloads/"
  exit 1
else
  echo "‚úÖ Python.framework –ù–ê–ô–î–ï–ù: $PYTHON_FRAMEWORK_SRC"
  echo "üìÅ –í–ï–†–°–ò–ò Python:"
  ls -la "$PYTHON_FRAMEWORK_SRC/Versions/" 2>/dev/null || echo "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –≤–µ—Ä—Å–∏–π"
fi

# –ö–æ–ø–∏—Ä—É–µ–º Python.framework —Å —Ä–∞–∑—ã–º–µ–Ω–æ–≤–∞–Ω–∏–µ–º —Å—Å—ã–ª–æ–∫
echo "‚Üí –ö–û–ü–ò–†–£–ï–ú Python.framework..."
echo "   –ò–ó: $PYTHON_FRAMEWORK_SRC"
echo "   –í: $FRAMEWORKS_DIR/"

mkdir -p "$FRAMEWORKS_DIR"
echo "‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ Frameworks: $FRAMEWORKS_DIR"

echo "üîÑ –ö–û–ü–ò–†–û–í–ê–ù–ò–ï Python.framework (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è)..."
cp -R -L "$PYTHON_FRAMEWORK_SRC" "$FRAMEWORKS_DIR/" || {
  echo "‚ùå‚ùå‚ùå –ù–ï –£–î–ê–õ–û–°–¨ –°–ö–û–ü–ò–†–û–í–ê–¢–¨ Python.framework"
  echo "üîç –û–¢–õ–ê–î–û–ß–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:"
  echo "   –ò—Å—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: $([ -d "$PYTHON_FRAMEWORK_SRC" ] && echo "–î–ê" || echo "–ù–ï–¢")"
  echo "   –¶–µ–ª–µ–≤–∞—è –ø–∞–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: $([ -d "$FRAMEWORKS_DIR" ] && echo "–î–ê" || echo "–ù–ï–¢")"
  echo "   –ü—Ä–∞–≤–∞ –Ω–∞ —á—Ç–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–π: $([ -r "$PYTHON_FRAMEWORK_SRC" ] && echo "–î–ê" || echo "–ù–ï–¢")"
  echo "   –ü—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ —Ü–µ–ª–µ–≤—É—é: $([ -w "$FRAMEWORKS_DIR" ] && echo "–î–ê" || echo "–ù–ï–¢")"
  exit 1
}
echo "‚úÖ Python.framework –°–ö–û–ü–ò–†–û–í–ê–ù"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
COPIED_FRAMEWORK="$FRAMEWORKS_DIR/Python.framework"
if [ -d "$COPIED_FRAMEWORK" ]; then
  echo "‚úÖ –ö–û–ü–ò–Ø Python.framework –°–û–ó–î–ê–ù–ê: $COPIED_FRAMEWORK"
  echo "üìÅ –°–¢–†–£–ö–¢–£–†–ê –°–ö–û–ü–ò–†–û–í–ê–ù–ù–û–ì–û FRAMEWORK:"
  find "$COPIED_FRAMEWORK" -maxdepth 3 -type d | head -20
else
  echo "‚ùå‚ùå‚ùå –ö–û–ü–ò–Ø Python.framework –ù–ï –°–û–ó–î–ê–ù–ê!"
  exit 1
fi

# –°–æ–∑–¥–∞—ë–º venv
echo "‚Üí –°–û–ó–î–ê–Å–ú VIRTUALENV..."
PYTHON_BIN="$FRAMEWORKS_DIR/Python.framework/Versions/$PYTHON_VERSION/bin/python3"
echo "   –ü—É—Ç—å –∫ Python binary: $PYTHON_BIN"

if [ ! -f "$PYTHON_BIN" ]; then
  echo "‚ùå‚ùå‚ùå Python –±–∏–Ω–∞—Ä–Ω–∏–∫ –ù–ï –ù–ê–ô–î–ï–ù –≤ $PYTHON_BIN"
  echo "üîç –ü–û–ò–°–ö –î–û–°–¢–£–ü–ù–´–• –í–ï–†–°–ò–ô:"
  
  VERSIONS_DIR="$FRAMEWORKS_DIR/Python.framework/Versions"
  if [ -d "$VERSIONS_DIR" ]; then
    echo "üìÅ –î–û–°–¢–£–ü–ù–´–ï –í–ï–†–°–ò–ò –í $VERSIONS_DIR:"
    ls -la "$VERSIONS_DIR"
    
    for version_dir in "$VERSIONS_DIR"/*; do
      if [ -d "$version_dir" ]; then
        version_name=$(basename "$version_dir")
        python_path="$version_dir/bin/python3"
        echo "   –í–µ—Ä—Å–∏—è $version_name: $([ -f "$python_path" ] && echo "‚úÖ python3 –Ω–∞–π–¥–µ–Ω" || echo "‚ùå python3 –ù–ï –Ω–∞–π–¥–µ–Ω")"
      fi
    done
  else
    echo "‚ùå –ü–ê–ü–ö–ê VERSIONS –ù–ï –°–£–©–ï–°–¢–í–£–ï–¢: $VERSIONS_DIR"
  fi
  exit 1
else
  echo "‚úÖ Python binary –ù–ê–ô–î–ï–ù: $PYTHON_BIN"
  echo "üìä –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û Python:"
  "$PYTHON_BIN" --version 2>&1 || echo "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏"
fi

echo "üîÑ –°–û–ó–î–ê–ù–ò–ï VENV (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è)..."
echo "   –ö–æ–º–∞–Ω–¥–∞: '$PYTHON_BIN' -m venv '$VENV_DST'"

"$PYTHON_BIN" -m venv "$VENV_DST" || {
  echo "‚ùå‚ùå‚ùå –ù–ï –£–î–ê–õ–û–°–¨ –°–û–ó–î–ê–¢–¨ VENV"
  echo "üîç –û–¢–õ–ê–î–û–ß–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:"
  echo "   Python binary —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: $([ -f "$PYTHON_BIN" ] && echo "–î–ê" || echo "–ù–ï–¢")"
  echo "   Python binary –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π: $([ -x "$PYTHON_BIN" ] && echo "–î–ê" || echo "–ù–ï–¢")"
  echo "   –¶–µ–ª–µ–≤–∞—è –ø–∞–ø–∫–∞ –¥–ª—è venv: $VENV_DST"
  echo "   –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –ø–∞–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: $([ -d "$(dirname "$VENV_DST")" ] && echo "–î–ê" || echo "–ù–ï–¢")"
  echo "   –ü—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é: $([ -w "$(dirname "$VENV_DST")" ] && echo "–î–ê" || echo "–ù–ï–¢")"
  exit 1
}

echo "‚úÖ VENV –°–û–ó–î–ê–ù: $VENV_DST"
echo "üìÅ –°–¢–†–£–ö–¢–£–†–ê –°–û–ó–î–ê–ù–ù–û–ì–û VENV:"
find "$VENV_DST" -maxdepth 2 -type d | head -10

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
echo "‚Üí –£–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –ó–ê–í–ò–°–ò–ú–û–°–¢–ò –ò–ó requirements.txt..."
REQUIREMENTS_FILE="$PROJECT_DIR/Resources/requirements.txt"
echo "   –§–∞–π–ª requirements: $REQUIREMENTS_FILE"

if [ ! -f "$REQUIREMENTS_FILE" ]; then
  echo "‚ùå‚ùå‚ùå –§–ê–ô–õ requirements.txt –ù–ï –ù–ê–ô–î–ï–ù: $REQUIREMENTS_FILE"
  echo "üîç –ü–û–ò–°–ö requirements.txt:"
  find "$PROJECT_DIR" -name "requirements.txt" -type f 2>/dev/null || echo "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏–≥–¥–µ –≤ –ø—Ä–æ–µ–∫—Ç–µ"
  exit 1
else
  echo "‚úÖ requirements.txt –ù–ê–ô–î–ï–ù"
  echo "üìã –°–û–î–ï–†–ñ–ò–ú–û–ï requirements.txt:"
  cat "$REQUIREMENTS_FILE"
fi

echo "üîÑ –ê–ö–¢–ò–í–ê–¶–ò–Ø VENV –ò –£–°–¢–ê–ù–û–í–ö–ê –ü–ê–ö–ï–¢–û–í..."
VENV_ACTIVATE="$VENV_DST/bin/activate"
VENV_PYTHON="$VENV_DST/bin/python3"
VENV_PIP="$VENV_DST/bin/pip"

echo "   activate script: $VENV_ACTIVATE"
echo "   venv python: $VENV_PYTHON"
echo "   venv pip: $VENV_PIP"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã venv
for venv_file in "$VENV_ACTIVATE" "$VENV_PYTHON" "$VENV_PIP"; do
  if [ -f "$venv_file" ]; then
    echo "   ‚úÖ –ù–ê–ô–î–ï–ù: $(basename "$venv_file")"
  else
    echo "   ‚ùå –ù–ï –ù–ê–ô–î–ï–ù: $(basename "$venv_file") –ø–æ –ø—É—Ç–∏ $venv_file"
  fi
done

source "$VENV_ACTIVATE"
echo "‚úÖ VENV –ê–ö–¢–ò–í–ò–†–û–í–ê–ù"

echo "üìä –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ê–ö–¢–ò–í–ò–†–û–í–ê–ù–ù–û–ú –û–ö–†–£–ñ–ï–ù–ò–ò:"
which python3
which pip
python3 --version 2>&1 || echo "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏ Python"
pip --version 2>&1 || echo "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏ pip"

echo "üîÑ –£–°–¢–ê–ù–û–í–ö–ê –ü–ê–ö–ï–¢–û–í..."
pip install -r "$REQUIREMENTS_FILE" || {
  echo "‚ùå‚ùå‚ùå –ù–ï –£–î–ê–õ–û–°–¨ –£–°–¢–ê–ù–û–í–ò–¢–¨ –ó–ê–í–ò–°–ò–ú–û–°–¢–ò"
  echo "üîç –û–¢–õ–ê–î–û–ß–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:"
  echo "   pip –¥–æ—Å—Ç—É–ø–µ–Ω: $(which pip || echo "–ù–ï–¢")"
  echo "   requirements —á–∏—Ç–∞–µ–º—ã–π: $([ -r "$REQUIREMENTS_FILE" ] && echo "–î–ê" || echo "–ù–ï–¢")"
  exit 1
}

echo "‚úÖ –ó–ê–í–ò–°–ò–ú–û–°–¢–ò –£–°–¢–ê–ù–û–í–õ–ï–ù–´"
echo "üì¶ –£–°–¢–ê–ù–û–í–õ–ï–ù–ù–´–ï –ü–ê–ö–ï–¢–´:"
pip list | head -20

deactivate
echo "‚úÖ VENV –î–ï–ê–ö–¢–ò–í–ò–†–û–í–ê–ù"

# Copy Python resources (scripts and models) to app bundle
echo "‚Üí –ö–û–ü–ò–†–£–ï–ú PYTHON –†–ï–°–£–†–°–´ (—Å–∫—Ä–∏–ø—Ç—ã –∏ –º–æ–¥–µ–ª–∏)..."

# Copy autocomplete.py
AUTOCOMPLETE_SRC="$PROJECT_DIR/Resources/autocomplete.py"
echo "   –ö–æ–ø–∏—Ä—É–µ–º autocomplete.py –∏–∑: $AUTOCOMPLETE_SRC"
if [ -f "$AUTOCOMPLETE_SRC" ]; then
  cp "$AUTOCOMPLETE_SRC" "$RESOURCES_DIR/" || {
    echo "‚ùå‚ùå‚ùå –ù–ï –£–î–ê–õ–û–°–¨ –°–ö–û–ü–ò–†–û–í–ê–¢–¨ autocomplete.py"
    exit 1
  }
  echo "‚úÖ autocomplete.py –°–ö–û–ü–ò–†–û–í–ê–ù"
else
  echo "‚ùå‚ùå‚ùå autocomplete.py –ù–ï –ù–ê–ô–î–ï–ù: $AUTOCOMPLETE_SRC"
  exit 1
fi

# Copy model file if it exists
MODEL_SRC="$PROJECT_DIR/Resources/minillm_export.pt"
echo "   –ö–æ–ø–∏—Ä—É–µ–º minillm_export.pt –∏–∑: $MODEL_SRC"
if [ -f "$MODEL_SRC" ]; then
  cp "$MODEL_SRC" "$RESOURCES_DIR/" || {
    echo "‚ùå‚ùå‚ùå –ù–ï –£–î–ê–õ–û–°–¨ –°–ö–û–ü–ò–†–û–í–ê–¢–¨ minillm_export.pt"
    exit 1
  }
  echo "‚úÖ minillm_export.pt –°–ö–û–ü–ò–†–û–í–ê–ù"
else
  echo "‚ö†Ô∏è minillm_export.pt –ù–ï –ù–ê–ô–î–ï–ù –≤ Resources, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º: $MODEL_SRC"
  echo "üîç –ü–û–ò–°–ö –§–ê–ô–õ–ê –ú–û–î–ï–õ–ò:"
  find "$PROJECT_DIR" -name "minillm_export.pt" -type f 2>/dev/null || echo "–§–∞–π–ª –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏–≥–¥–µ –≤ –ø—Ä–æ–µ–∫—Ç–µ"
fi

# Copy requirements.txt for reference
REQ_SRC="$PROJECT_DIR/Resources/requirements.txt"
echo "   –ö–æ–ø–∏—Ä—É–µ–º requirements.txt –∏–∑: $REQ_SRC"
if [ -f "$REQ_SRC" ]; then
  cp "$REQ_SRC" "$RESOURCES_DIR/" || {
    echo "‚ùå‚ùå‚ùå –ù–ï –£–î–ê–õ–û–°–¨ –°–ö–û–ü–ò–†–û–í–ê–¢–¨ requirements.txt"
    exit 1
  }
  echo "‚úÖ requirements.txt –°–ö–û–ü–ò–†–û–í–ê–ù"
else
  echo "‚ùå‚ùå‚ùå requirements.txt –ù–ï –ù–ê–ô–î–ï–ù: $REQ_SRC"
fi

echo "üìÅ –§–ò–ù–ê–õ–¨–ù–û–ï –°–û–î–ï–†–ñ–ò–ú–û–ï RESOURCES:"
ls -la "$RESOURCES_DIR" || echo "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è Resources"

# –ü–∞—Ç—á–∏–º –ø—É—Ç–∏
echo "‚Üí –ü–ê–¢–ß–ò–ú –ü–£–¢–ò –í python3..."
PYBIN="$VENV_DST/bin/python3"
echo "   Python binary –¥–ª—è –ø–∞—Ç—á–∏–Ω–≥–∞: $PYBIN"

if [ ! -f "$PYBIN" ]; then
  echo "‚ùå‚ùå‚ùå Python binary –¥–ª—è –ø–∞—Ç—á–∏–Ω–≥–∞ –ù–ï –ù–ê–ô–î–ï–ù: $PYBIN"
  exit 1
fi

LIBPYTHON_OLD="/Library/Frameworks/Python.framework/Versions/$PYTHON_VERSION/lib/libpython${PYTHON_VERSION}.dylib"
LIBPYTHON_NEW="@executable_path/../../../Frameworks/Python.framework/Versions/$PYTHON_VERSION/lib/libpython${PYTHON_VERSION}.dylib"

echo "   –ó–∞–º–µ–Ω—è–µ–º –ø—É—Ç—å:"
echo "   –ò–ó: $LIBPYTHON_OLD"
echo "   –í:  $LIBPYTHON_NEW"

install_name_tool -change \
  "$LIBPYTHON_OLD" \
  "$LIBPYTHON_NEW" \
  "$PYBIN" || {
  echo "‚ùå‚ùå‚ùå –ù–ï –£–î–ê–õ–û–°–¨ –ü–ê–¢–ß–ò–¢–¨ libpython"
  echo "üîç –û–¢–õ–ê–î–û–ß–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:"
  echo "   install_name_tool –¥–æ—Å—Ç—É–ø–µ–Ω: $(which install_name_tool || echo "–ù–ï–¢")"
  echo "   Python binary —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: $([ -f "$PYBIN" ] && echo "–î–ê" || echo "–ù–ï–¢")"
  otool -L "$PYBIN" 2>/dev/null || echo "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"
  exit 1
}

echo "‚úÖ –ü–£–¢–ò –í python3 –ü–†–û–ü–ê–¢–ß–ï–ù–´"

# –ü–µ—Ä–µ–ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º python3
echo "‚Üí –ü–ï–†–ï–ü–û–î–ü–ò–°–´–í–ê–ï–ú python3..."
codesign --force --sign - "$PYBIN" || {
  echo "‚ùå‚ùå‚ùå –ù–ï –£–î–ê–õ–û–°–¨ –ü–ï–†–ï–ü–û–î–ü–ò–°–ê–¢–¨ python3"
  echo "üîç –û–¢–õ–ê–î–û–ß–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:"
  echo "   codesign –¥–æ—Å—Ç—É–ø–µ–Ω: $(which codesign || echo "–ù–ï–¢")"
  exit 1
}

echo "‚úÖ python3 –ü–ï–†–ï–ü–û–î–ü–ò–°–ê–ù"

echo "üéâüéâüéâ –£–ü–ê–ö–û–í–ö–ê .app –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û! üéâüéâüéâ"
echo "üìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:"
echo "   –†–∞–∑–º–µ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: $(du -sh "$APP_PATH" 2>/dev/null || echo "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å")"
echo "   –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: $(date)"

echo "üîç –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –°–¢–†–£–ö–¢–£–†–´:"
echo "üìÅ –°–û–î–ï–†–ñ–ò–ú–û–ï APP:"
ls -la "$APP_PATH/Contents/" 2>/dev/null || echo "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è Contents"

echo "üìÅ –°–û–î–ï–†–ñ–ò–ú–û–ï RESOURCES:"
ls -la "$RESOURCES_DIR" 2>/dev/null || echo "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è Resources"

echo "üìÅ –°–û–î–ï–†–ñ–ò–ú–û–ï VENV:"
ls -la "$VENV_DST" 2>/dev/null || echo "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è venv"

echo "üìÅ –°–û–î–ï–†–ñ–ò–ú–û–ï VENV/BIN:"
ls -la "$VENV_DST/bin" 2>/dev/null || echo "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è venv/bin"
